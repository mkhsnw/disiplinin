// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks       Task[]        @relation("AuthorToTask")
  assigned    Task[]        @relation("AssigneeToTask")
  teams       TeamMember[]
  comments    Comment[]
  TaskHistory TaskHistory[]
  Attachment  Attachment[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String
  priority    Priority  @default(MEDIUM)
  status      Status    @default(TODO)
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author               User          @relation("AuthorToTask", fields: [authorId], references: [id], onDelete: Cascade)
  authorId             String
  assignee             User?         @relation("AssigneeToTask", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId           String?
  labels               TaskLabel[]
  comments             Comment[]
  team                 Team?         @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId               String?
  aiPrioritySuggestion Priority?
  aiPriorityConfidence Float?
  TaskHistory          TaskHistory[]
  Attachment           Attachment[]

  @@index([status])
  @@index([priority])
  @@index([deadline])
  @@index([teamId])
  @@index([assigneeId])
  @@map("tasks")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())

  members TeamMember[]
  tasks   Task[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(uuid())
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@unique([userId, teamId])
  @@map("team_members")
}

model Label {
  id    String @id @default(uuid())
  name  String @unique
  color String @default("#64748b")

  tasks TaskLabel[]

  @@map("labels")
}

model TaskLabel {
  task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  String
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId String

  @@id([taskId, labelId])
  @@map("task_labels")
}

model TaskHistory {
  id        String   @id @default(uuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  userId    String
  changedBy User     @relation(fields: [userId], references: [id])
  field     String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())
}

model Attachment {
  id     String  @id @default(uuid())
  url    String
  type   String // "avatar", "task_attachment", dll
  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String

  @@map("comments")
}

enum Role {
  USER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TeamRole {
  MEMBER
  LEADER
  ADMIN
}
